package com.finanzas.sf.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Service;

import com.finanzas.sf.constants.Constants;
import com.finanzas.sf.dto.IncomeResponseDTO;
import com.finanzas.sf.dto.GuardarDatoRequestDTO;
import com.finanzas.sf.errorhandler.GenericServerException;
import com.finanzas.sf.model.Category;
import com.finanzas.sf.model.Income;
import com.finanzas.sf.model.Indicador;
import com.finanzas.sf.model.User;
import com.finanzas.sf.repository.CategoryRepository;
import com.finanzas.sf.repository.IncomeRepository;
import com.finanzas.sf.repository.IndicadorRepository;
import com.finanzas.sf.repository.UserRepository;
import com.finanzas.sf.util.JwtUtil;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class DatoServiceImpl implements IncomeService{
	
	final JwtUtil jwtUtil;
	final CategoryRepository areaRepository;
	final UserRepository usuarioRepository;
	final IndicadorRepository indicadorRepository;
	final IncomeRepository incomeRepository;

	@Override
	public void guardarDato(GuardarDatoRequestDTO guardarDatoRequestDTO) {
		
//		String myToken = token.substring(7);
//        String codigoUsuariotSession = jwtUtil.getUsernameFromToken(myToken);
		
        User usuario =usuarioRepository.findByCodigoUsuarioAndEstado(guardarDatoRequestDTO.getCodigoUsuario(), Constants.RESOURCE_ACTIVE).orElseThrow(() ->
        new GenericServerException("Error not Found User"));
        
        Indicador indicador =indicadorRepository.findByCodigoIndicadorAndEstado(guardarDatoRequestDTO.getCodigoIndicador(), Constants.RESOURCE_ACTIVE).orElseThrow(() ->
        new GenericServerException("Error not Found Indicador"));
        
        if(guardarDatoRequestDTO.getIdDatoIndicador() == null) {
        	Income datoIndicador = new Income();
        	datoIndicador.setDatoreal(guardarDatoRequestDTO.getDatoReal());
        	datoIndicador.setEstado(Constants.RESOURCE_ACTIVE);
        	datoIndicador.setFechaRegistro(new Date());
        	datoIndicador.setIndicador(indicador);
        	datoIndicador.setUsuario(usuario);
        	datoIndicadorRepository.save(datoIndicador);
        }else {
        	Income datoIndicador = incomeRepository.findDatoIndicadorByIdDatoIndicadorAndEstado(guardarDatoRequestDTO.getIdDatoIndicador(), Constants.RESOURCE_ACTIVE).orElseThrow(() ->
            new GenericServerException("Error not Found Dato Indicador"));
        	datoIndicador.setDatoreal(guardarDatoRequestDTO.getDatoReal());
        	datoIndicador.setEstado(Constants.RESOURCE_ACTIVE);
        	datoIndicador.setFechaRegistro(new Date());
        	datoIndicador.setIndicador(indicador);
        	datoIndicador.setUsuario(usuario);
        	datoIndicadorRepository.save(datoIndicador);
        }
        
	}

	@Override
	public List<IncomeResponseDTO> getListDatoIndicador() {
		List<Income> listIncome = incomeRepository.findIncomeByState(Constants.RESOURCE_ACTIVE);
		List<IncomeResponseDTO> incomeResponseDTOs = new ArrayList();
		
		double totalIncome = 0;
		for (Income income : listIncome) {
			totalIncome = totalIncome + income.getAmount()
		}
		
		listIncome.forEach(income->{
			IncomeResponseDTO incomeResponseDTO = new IncomeResponseDTO();
			incomeResponseDTO.setIncome(totalIncome);
			
			datoIndicadorDTO.setFechaingreso(datoIndicador.getFechaingreso());
			datoIndicadorDTO.setNombreIndicador(datoIndicador.getIndicador().getNombreIndicador());
			datoIndicadorDTO.setObjetivo(datoIndicador.getIndicador().getObjetivo());
			incomeResponseDTOs.add(datoIndicadorDTO);
		});
		return incomeResponseDTOs;
	}

}
