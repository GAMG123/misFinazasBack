package com.finanzas.sf.service;

import com.finanzas.sf.constants.Constants;
import com.finanzas.sf.dto.CategoryDTO;
import com.finanzas.sf.dto.DeleteCategoryRequestDTO;
import com.finanzas.sf.dto.SaveCategoryRequestDTO;
import com.finanzas.sf.errorhandler.GenericClientException;
import com.finanzas.sf.errorhandler.GenericServerException;
import com.finanzas.sf.model.Category;
import com.finanzas.sf.model.User;
import com.finanzas.sf.repository.CategoryRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CategoryServiceImpl implements CategoryService{
    final CategoryRepository categoryRepository;
    final UserRepository userRepository;
    @Override
    public List<CategoryDTO> getListCategorys(Long idUser) {
    	User user =userRepository.findUserByIdUserAndState(idUser, Constants.RESOURCE_ACTIVE).orElseThrow(() ->
        new GenericServerException("Error not Found User"));
       List<Category> listCategory=categoryRepository.findCategoryByEstado(Constants.RESOURCE_ACTIVE);
       if(!listCategory.isEmpty()){
            List<CategoryDTO> listCategoryDto=new ArrayList<>();
            listCategory.forEach(categoryEntity->{
                CategoryDTO categoryDTO =new CategoryDTO() ;
                categoryDTO.setIdCategory(categoryEntity.getIdCategory());
                categoryDTO.setNameCategory(categoryEntity.getNameCategory());
                listCategoryDto.add(categoryDTO);
            });
            return listCategoryDto;
       }else {
           throw new GenericClientException("No se tiene Categorias registradas", HttpStatus.NOT_FOUND);
       }
    }
	@Override
	public void saveCategory(SaveCategoryRequestDTO saveCategoryRequestDTO) {
		Category category = new Category();
		category.setNameCategory(saveCategoryRequestDTO.getNameCategory());
		category.setDescriptionCategory(saveCategoryRequestDTO.getDescriptionCategory());
		category.setState(Constants.RESOURCE_ACTIVE);
		category.setRegistrationDate(new Date());
		categoryRepository.save(category);
		
	}
	@Override
	public void deleteCategory(DeleteCategoryRequestDTO deleteCategoryRequestDTO) {
		Category category = categoryRepository.findCategoryByIdCategoryAndState(deleteCategoryRequestDTO.getIdCategory(), Constants.RESOURCE_ACTIVE).orElseThrow(() ->
        new GenericServerException("Error not Found Indicador"));
		categoryRepository.delete(category);
	}
}
