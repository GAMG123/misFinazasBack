package com.finanzas.sf.service;

import com.finanzas.sf.constants.Constants;
import com.finanzas.sf.dto.IndicadorDTO;
import com.finanzas.sf.errorhandler.C4fGenericClientException;
import com.finanzas.sf.model.Category;
import com.finanzas.sf.model.Indicador;
import com.finanzas.sf.model.Detail;
import com.finanzas.sf.model.User;
import com.finanzas.sf.repository.*;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class IndicadorServiceImpl implements IndicadorService {
    final UserRepository usuarioRepository;
    final ResumeRepository periodoRepository;
    final CategoryRepository areaRepository;
    final IndicadorRepository indicadorRepository;
    @Override
    public List<IndicadorDTO> getListIndicadores() {
        List<Indicador>listIndicador=indicadorRepository.findIndicadorByEstado(Constants.RESOURCE_ACTIVE);
        List<IndicadorDTO> listIndicadorDTO =new ArrayList();
        listIndicador.forEach(indicador->{
            IndicadorDTO indicadorDTO =new IndicadorDTO();
            indicadorDTO.setIdIndicador(indicador.getIdIndicador());
            indicadorDTO.setCodigoIndicador(indicador.getCodigoIndicador());
            indicadorDTO.setCodigoPeriodo(indicador.getPeriodo().getCodigoPeriodo());
            indicadorDTO.setNombreIndicador(indicador.getNombreIndicador());
            indicadorDTO.setObjetivo(indicador.getObjetivo());
            indicadorDTO.setPorcentajeOptimo(indicador.getPorcentajeOptimo());
            indicadorDTO.setPorcentajeNormal(indicador.getPorcentajeNormal());
            listIndicadorDTO.add(indicadorDTO);
        });
        return listIndicadorDTO;
    }

    @Override
    public void saveIndicador(IndicadorDTO indicadorDTO) {
        Optional<User> optionalUsuario= usuarioRepository.findByCodigoUsuarioAndEstado(indicadorDTO.getCodigoUsuario(),Constants.RESOURCE_ACTIVE);
        User usuario = optionalUsuario.orElseThrow(()->new C4fGenericClientException("Codigo o contrase√±a incorrectos", HttpStatus.FORBIDDEN));
        Optional<Category> optionalArea=  areaRepository.findAreaByCodigoAreaAndEstado(indicadorDTO.getCodigoArea(),Constants.RESOURCE_ACTIVE);
        Category area = optionalArea.orElseThrow(()->new C4fGenericClientException(" codigo de area no exite", HttpStatus.NOT_FOUND));
        Optional<Detail> optionalPeriodo=  periodoRepository.findPeriodoByCodigoPeriodoAndEstado(indicadorDTO.getCodigoPeriodo(),Constants.RESOURCE_ACTIVE);
        Detail periodo = optionalPeriodo.orElseThrow(()->new C4fGenericClientException(" codigo de periodo no exite", HttpStatus.NOT_FOUND));
        
        if(indicadorDTO.getIdIndicador()==null){
        Indicador indicador =new Indicador();
        indicador.setUsuario(usuario);
        indicador.setArea(area);
        indicador.setPeriodo(periodo);
        indicador.setCodigoIndicador(indicadorDTO.getCodigoIndicador());
        indicador.setNombreIndicador(indicadorDTO.getNombreIndicador());
        indicador.setObjetivo(indicadorDTO.getObjetivo());
        indicador.setPorcentajeOptimo(indicadorDTO.getPorcentajeOptimo());
        indicador.setPorcentajeNormal(indicadorDTO.getPorcentajeNormal());
        indicador.setEstado(Constants.RESOURCE_ACTIVE);
        indicador.setFechaRegistro(new Date());
        indicadorRepository.save(indicador);
        }
        else {
            Optional<Indicador> optionaindicador = indicadorRepository.findIndicadorByIdIndicadorAndEstado(indicadorDTO.getIdIndicador(), Constants.RESOURCE_ACTIVE);
            Indicador indicador = optionaindicador.orElseThrow(() -> new C4fGenericClientException("id de Usuario no exite", HttpStatus.NOT_FOUND));
            indicador.setUsuario(usuario);
            indicador.setArea(area);
            indicador.setPeriodo(periodo);
            indicador.setCodigoIndicador(indicadorDTO.getCodigoIndicador());
            indicador.setNombreIndicador(indicadorDTO.getNombreIndicador());
            indicador.setObjetivo(indicadorDTO.getObjetivo());
            indicador.setPorcentajeOptimo(indicadorDTO.getPorcentajeOptimo());
            indicador.setPorcentajeNormal(indicadorDTO.getPorcentajeNormal());
            indicador.setEstado(Constants.RESOURCE_ACTIVE);
            indicador.setFechaRegistro(new Date());
            indicadorRepository.save(indicador);
        }
    }
}
